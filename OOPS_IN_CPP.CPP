=======================================================================================================
							OOPS in C++/Java
=======================================================================================================
OOPS   : -It stands for "Object Oriented Programming System". 

Entity : -Any Living or Non-Living Object in the world called Entity.
		 -It may be physical or logical.
		 -It has its own set of Atributes(structure) & Behaviour(uses). 
		 
		 
Features of OOps : -To solve real life probelems.
				   -To Provide Extensibility.  
				   -security.				   
				   -User Friendliness.  
				   -Reusability .
				   
Note : We are Moving from process & structured based oriented language to object oriented.
______________________________________________________________________________________________________
		 
Pillers in OOPS : There are 7 pillers in OOPS .

1.Major Pillers :
				   1.Abstraction.
				   2.Encapsulation.
				   3.Inheritance.
				   4.Polymorphism.			  
				
2.Minor Pillers :
				   5.Strong Type Checking.
				   6.Concurrency/Multithreading.
				   7.Persistency.
				   
Note : -The Languages which Supports first 4 Pilers completely are said to be Object Oriented.
	   -Otherwise It will not consider Object Oriented .
	   -C++ supports first 4 pillers so it is partially Object Oriented.
_____________________________________________________________________________________________________

1.Abstraction : -The Procees of Crating Abstract called Abstraction.
				-Considering Important things ignoring the rest.
				-for Time & Space Managment .
				 Ex.Person->Atributes,Student data .
___________________________________________________________________________________________________
				
2.Encapsulation : -The process of Capsuling called Encapsulation.
				  -The Wrapping & Binding of data to provide security & user Friendliness called Encapsulation.
				   Ex.Capsule. 
___________________________________________________________________________________________________
	
3.Inheritence : Aquiring Properties of Someone else(by his permision) for Reusability.
Containment	  :						<-- Or names	Diagram A->B : 1.A contains B.
Containership :						<-- Or names				   2.B is contained by A.
"Is" a part of relationship	 :		<-- Or names				   3.B is a part of A.
"Has" a part of relationship : 		<-- Or names				   4.A has B.
Three real world Situations:
	1>Sometimes one object is present inside another object.
	2>Sometimes one object Interacts with another object.
	3>Sometimes one Object  has some relationship with another object.
___________________________________________________________________________________________________
	
	


			 
	   
	   
	   
	   
				   
					
				   
				   
		
				 
		 			
		 
	
	
		
